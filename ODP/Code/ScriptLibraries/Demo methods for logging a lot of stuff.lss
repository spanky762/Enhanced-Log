'++LotusScript Development Environment:2:5:(Options):0:74
%REM ***************************************************************************
 ************************************************************************************
	Methods for Logging a Lot of Stuff Lotusscript Library

	Demonstration Library for Enhanced Logging
	&copy; Copyright 2002 - 2010, Devin S. Olson
	http://www.azlighthouse.com
	
	Author: Devin S. Olson  (devin.olson@azlighthouse.com)
	http://www.devinolson.net
	Version 2021.02.18

	Last updated: 02/2021

 ************************************************************************************
%END REM *********************************************************************

Option Public
Option Explicit
Use "azlwAppUtils"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class Wabe
Declare Sub logalotofstuff()  
Declare Sub proxyLogWarning (description$)
Declare Sub proxyLogAction (description$)
Declare Sub logActionToEnhancedLogObject(source As EnhancedLog, description$)

'++LotusScript Development Environment:2:5:(Declarations):0:10
Private Const LIB_PREFIX = |Library: Methods for Logging a Lot of Stuff.|


Const NUMBERCHARS = "0123456789"
Const ALPHACHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Const ALPHANUMERIC = NUMBERCHARS & ALPHACHARS




Public Class Wabe
	Private CLASS_PREFIX As String
	Private manxome_ As Integer
	Private vorpal_ As Integer 
	
	Public Sub New()
		CLASS_PREFIX = |Wabe.|
		me.manxome = -1
	End Sub ' New
	
	Sub gyre (source As EnhancedLog, pos&)
		enhLogProfileMethodStart CLASS_PREFIX, ||
		If (pos& < 200) Then 
			me.gyre source, pos& + 20
		Else 
			me.gimble source, pos&	
		End If
		enhLogProfileMethodFinish CLASS_PREFIX, ||
	End Sub 
	
	Sub gimble (source As EnhancedLog, pos&)
%REM  DEVELOPERS NOTE
	The passed in source EnhancedLog object is only used to demonstrate that the 
	EnhancedLog class is a Singleton object.  Normal usage would never require an 
	explicitly declared EnhancedLog object -just about everything needed for normal 
	logging is available through the enhLogXXXX wrapper methods.
%END REM
		
		enhLogProfileMethodStart CLASS_PREFIX, ||
		Dim description As String
		Dim extendedInfo As String
		Dim idx As Integer
		
		On Error GoTo ErrorTrap
		
		
		If (pos& > 200) Then 
			Select Case pos&
			Case 201: enhLogWarning CLASS_PREFIX, |All|
			Case 202: enhLogWarning CLASS_PREFIX, |mimsy|
			Case 203: enhLogWarning CLASS_PREFIX, |were|
			Case 204: enhLogWarning CLASS_PREFIX, |the|
			Case 205: enhLogWarning CLASS_PREFIX, |borogoves,|
			Case 206: enhLogWarning CLASS_PREFIX, |And|
			Case 207: enhLogWarning CLASS_PREFIX, |the|
			Case 208: enhLogWarning CLASS_PREFIX, |mome|
			Case 209: enhLogWarning CLASS_PREFIX, |raths|
			Case 210: enhLogWarning CLASS_PREFIX, |outgrabe.|
			End Select ' Case pos&
			
			If (pos& < 250) Then me.vorpal = pos&

		End If ' (pos& > 200)
		
		For idx% = 1 To 36
			description$ = description$ & Mid$(ALPHANUMERIC, idx%, 1)
			enhLogAction CLASS_PREFIX, |(| & CStr(pos&) & |.| & CStr(idx%) & |) | & description$
			If (((pos& + idx%) Mod 11) = 0) Then 
				
				enhLogExtendedContent CLASS_PREFIX, |I am the content. |, |I am extended content 1.|				
				enhLogExtendedContent ||, ||, |I am extended content 2|
				enhLogExtendedContent ||, ||, |I am extended content 3|
				enhLogExtendedContent ||, ||, |I am extended content 4|
				enhLogExtendedContent ||, ||, |I am extended content 5|
				enhLogExtendedContent ||, ||, ||
				
			End If ' (((idxEntry + idxAlphaChars%) Mod 11) = 0)
		Next idx%		
		
	ExitPoint:
		enhLogProfileMethodFinish CLASS_PREFIX, || 
		Exit Sub
	ErrorTrap:
		enhLogException CLASS_PREFIX, extendedInfo$
		Resume ExitPoint
	End Sub ' gimble
	
	
	Property Set manxome As Integer 
		enhLogProfileMethodStart CLASS_PREFIX, |Set|
		me.manxome_ = manxome
		enhLogProfileMethodFinish CLASS_PREFIX, |Set|
	End Property 
	
	Property Get manxome As Integer 
		enhLogProfileMethodStart CLASS_PREFIX, |Get|
		
		Select Case me.manxome_
			Case 0:
				me.manxome_ = 1
				enhLogWarning CLASS_PREFIX, |Beware the Jabberwock, my son! |  
				
			Case 1:
				me.manxome_ = 2
				enhLogWarning CLASS_PREFIX, |The jaws that bite, the claws that catch!|
				
			Case 2:
				me.manxome_ = 3
				enhLogWarning CLASS_PREFIX, |Beware the Jubjub bird, and shun|
				
			Case Else:
				me.manxome_ = 0
				enhLogWarning CLASS_PREFIX, |The frumious Bandersnatch!| 
		End Select 
		
		manxome = me.manxome_
			
		enhLogProfileMethodFinish CLASS_PREFIX, |Get|
	End Property 
	
	
	
	Property Set vorpal As Long 
		enhLogProfileMethodStart CLASS_PREFIX, |Set| 		
		On Error GoTo ErrorTrap
		
		Dim m As Integer
		
		me.vorpal_ = vorpal
		m = me.manxome
		
		enhLogExtendedContent CLASS_PREFIX, ||, CStr(me.vorpal)
		enhLogExtendedContent ||, ||, |divided by| 
		enhLogExtendedContent ||, ||, CStr(m) 
		enhLogExtendedContent ||, ||, |returns|
		enhLogExtendedContent ||, ||, CStr(me.vorpal / m) 
		
	ExitPoint:
		enhLogProfileMethodFinish CLASS_PREFIX, |Set|
		Exit Property
	ErrorTrap:
		enhLogException CLASS_PREFIX, ||
		Resume ExitPoint
	End Property 
	
	
	Property Get vorpal As Long 
		enhLogProfileMethodStart CLASS_PREFIX, |Get|
		vorpal = me.vorpal_
		enhLogProfileMethodFinish CLASS_PREFIX, |Get|
	End Property 
	
End Class 
'++LotusScript Development Environment:2:2:logalotofstuff:5:8
%REM
	Sub logalotofstuff
	Logs a Lot of Stuff 
%END REM
Sub logalotofstuff()  
	enhLogProfileMethodStart ||, ||
	
	Dim config As NotesDocument 
	Dim nvw As NotesView 
	Dim myWabe As Wabe
	
	Dim myLogObject_1 As EnhancedLog ' NEVER REQUIRED - USED HERE FOR EXAMPLE PURPOSES ONLY
	Dim myLogObject_2 As EnhancedLog ' NEVER REQUIRED - USED HERE FOR EXAMPLE PURPOSES ONLY
	Dim myLogObject_3 As EnhancedLog ' NEVER REQUIRED - USED HERE FOR EXAMPLE PURPOSES ONLY
	
	Dim idxAlphaChars As Integer
	Dim idx As Long
	Dim description As String
	
	
	On Error GoTo ErrorTrap
	
	Set myWabe = New Wabe()
	
	enhLogAction |This is the Prefix |, |Logging a lot of stuff|
	
	enhLogExtendedContent LIB_PREFIX, |Using a Prefix |, |The prefix is normally used to indicate a specific library|
	enhLogExtendedContent ||, ||, |or class containing the method which is calling the logging methods.|
	enhLogExtendedContent ||, ||, |If no prefix is desired then simply pass an empty string.|
	
	enhLogExtendedContent ||, ||, |A blank line can be inserted into the log by calling the|
	enhLogExtendedContent ||, ||, |enhLogExtendedContent method and passing it all blanks.|
	enhLogExtendedContent ||, ||, ||
	
	Set config = enhLogGetLogConfigDoc(False)
	If (Not (config Is Nothing)) Then 
		enhLogAction LIB_PREFIX, |It is also possible to log all the items from any document.  For instance, here is the information from the Enhanced Log Configuration document:|
		enhLogAllDocItems config
	End If ' (Not (config Is Nothing))	
	
	enhLogExtendedContent LIB_PREFIX, ||, ||
	enhLogAction LIB_PREFIX, |Creating an Object Instance of the EnhanceLog Class|
	enhLogExtendedContent ||, ||, |Although NOT required,  |
	enhLogExtendedContent ||, ||, |an explicit instance of the EnhancedLog class can created and used.  |
	enhLogExtendedContent ||, ||, |This is accomplished in the same manner as creating any other object instance: |
	enhLogExtendedContent ||, ||, |Set myLogObject = New EnhancedLog(programName$)|
	enhLogExtendedContent ||, ||, ||
	enhLogExtendedContent ||, ||, |IMPORTANT NOTE:  The EnhancedLog Class uses the SINGLETON pattern: |
	enhLogExtendedContent ||, ||, |  ALL EnhancedLog Objects reference the SAME OBJECT INSTANCE|
	enhLogExtendedContent ||, ||, |  This eliminates loss of continuity among multiple log instances within the same session.|
	enhLogExtendedContent ||, ||, |Example:|
	enhLogExtendedContent ||, ||, |    Set myLogObject_1 = New EnhancedLog("")|
	enhLogExtendedContent ||, ||, |    Set myLogObject_2 = New EnhancedLog("")|
	enhLogExtendedContent ||, ||, |At this point in your code, even though you have created two object handles, they both point to the same object.|
	enhLogExtendedContent ||, ||, |The above code is functionally equivalent to the following: |
	enhLogExtendedContent ||, ||, |    Set myLogObject_1 = New EnhancedLog("")|
	enhLogExtendedContent ||, ||, |    Set myLogObject_2 = myLogObject_1|
	enhLogExtendedContent ||, ||, ||
	enhLogExtendedContent LIB_PREFIX, _ 
	|The Demo agent will now create a new object instance handle to the EnhancedLog object:|, _ 
	|Set myLogObject_1 = New EnhancedLog("")|	
	Set myLogObject_1 = New EnhancedLog("")
	logActionToEnhancedLogObject myLogObject_1, |This is a direct call to myLogObject_1's LogAction Method|
	
	proxyLogWarning |This is what logging a warning looks like.|
	
	
	enhLogActionWithLink LIB_PREFIX, |It is also possible to include links, such as this link to the config document.|, config, |Document|, || 
	
	Set nvw = getCachedView(|lkp-Config|) 
	enhLogExtendedContentWithLink ||, ||, |Extended Content can also include links, such as this link to the config view.|, nvw, |View|, ||
	
	enhLogMethodResultWithLink LIB_PREFIX, _ 
	|In fact, links can be included with all of the enhLogXXXX methods | & _ 
	|(enhLogAction, enhLogExtendedContent, enhLogWarning, enhLogException, and enhLogMethodResult)|, _ 
	config, |Document|, || 
	
	enhLogExtendedContent ||, ||, || 
	enhLogExtendedContent ||, ||, || 
	
	
	enhLogExtendedContent LIB_PREFIX, _ 
	|The Demo agent will now create another new object instance handle to the EnhancedLog object:|, _ 
	|Set myLogObject_2 = New EnhancedLog("")|
	Set myLogObject_2 = New EnhancedLog("")
	logActionToEnhancedLogObject myLogObject_2, |This is a direct call to myLogObject_2's LogAction Method|
	
	enhLogExtendedContent LIB_PREFIX, _ 
	|The Demo agent will now create a third object instance handle to the EnhancedLog object:|, _ 
	|Set myLogObject_3 = myLogObject_1|
	Set myLogObject_3 = myLogObject_1
	logActionToEnhancedLogObject myLogObject_3, |This is a direct call to myLogObject_3's LogAction Method|
	
	logActionToEnhancedLogObject myLogObject_1, |Here is another direct call to myLogObject_1's LogAction Method|
	logActionToEnhancedLogObject myLogObject_2, |Here is another direct call to myLogObject_2's LogAction Method|
	logActionToEnhancedLogObject myLogObject_3, |Here is another direct call to myLogObject_3's LogAction Method|
	
	proxyLogAction |This is an indirect call using the public enhLogAction method.|

	enhLogExtendedContent ||, ||, ||
	enhLogWarning LIB_PREFIX, |**************************************************************************************************************|
	enhLogWarning LIB_PREFIX, |Examples of Extended Information, Logging Exceptions, and very large logs (multiple log documents)|
	enhLogWarning LIB_PREFIX, |NEVER ENABLE LOG STACK EXCEPTIONS IN PRODUCTION WITHOUT A VERY GOOD REASON|
	enhLogExtendedContent ||, ||, |Logging stack exceptions uses a back-end method which is known to have a memory leak.|
	enhLogExtendedContent ||, ||, |This can lead to a PANIC CRASH on the server.|
	enhLogWarning LIB_PREFIX, |**************************************************************************************************************|
	enhLogExtendedContent ||, ||, ||

	


	For idx& = 100 To 300
		enhLogSetLogStackExceptions ((idx& Mod 2) = 0) ' Logs stack exceptions on for even values of idx&
		
		enhLogAction LIB_PREFIX, |Vorpal: | & CStr(myWabe.vorpal) 
		
		If ((idx& Mod 3) = 0) Then
			myWabe.gyre myLogObject_3, idx&
		ElseIf ((idx& Mod 2) = 0) Then
			myWabe.gyre myLogObject_2, idx&
		Else
			myWabe.gyre myLogObject_1, idx&
		End If 

	Next idx&
	
ExitPoint:
	enhLogMethodResult LIB_PREFIX, |This is the what a method result looks like|
	enhLogProfileMethodFinish ||, || 
	Exit Sub	
ErrorTrap:
	enhLogException LIB_PREFIX, ||
	Resume ExitPoint
End Sub

'++LotusScript Development Environment:2:2:proxyLogWarning:2:8

Sub proxyLogWarning (description$)
	enhLogWarning LIB_PREFIX, description$
End Sub ' proxyLogWarning

'++LotusScript Development Environment:2:2:proxyLogAction:3:8


Sub proxyLogAction (description$)
	enhLogAction LIB_PREFIX, description$
End Sub ' proxyLogAction




'++LotusScript Development Environment:2:2:logActionToEnhancedLogObject:1:8
Sub logActionToEnhancedLogObject(source As EnhancedLog, description$)
%REM
	This demonstrates nothing more than logging an action to a passed in EnhancedLog object.
%END REM
	source.LogAction description$
End Sub ' logActionToEnhancedLogObject











