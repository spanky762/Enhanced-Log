<?xml version='1.0' encoding='utf-8'?>
<agent name='Purge Old Logs' alias='sch-PurgeOldLogs' xmlns='http://www.lotus.com/dxl'
 version='11.0' maintenanceversion='1.0' replicaid='85258671003806E7' hide='v3'
 publicaccess='false' designerversion='8.5.3' activatable='false' enabled='false'>
<noteinfo noteid='17e' unid='01100F469BFD81AD862577FA007653DD' sequence='16'>
<created><datetime>20101215T153227,17-06</datetime></created>
<modified><datetime dst='true'>20210521T112746,98-04</datetime></modified>
<revised><datetime dst='true'>20210521T112746,97-04</datetime></revised>
<lastaccessed><datetime dst='true'>20210521T112746,97-04</datetime></lastaccessed>
<addedtofile><datetime>20210203T051202,70-05</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Devin Olson/O=azlighthouse</name></updatedby>
<wassignedby><name>CN=Devin Olson/O=azlighthouse</name></wassignedby>
<designchange><datetime dst='true'>20210521T112746,96-04</datetime></designchange>
<trigger type='scheduled'>
<schedule type='daily' runlocation='choose'>
<starttime><datetime>T010000,00</datetime></starttime></schedule></trigger>
<documentset type='modified'/><code event='options'><lotusscript>%REM
	Agent (Purge Old Logs)
	Purges Old Log Documents based on Log Config settings
	
	@author Devin S. Olson (devin.olson@azlighthouse.com) 
%END REM

Option Explicit
Use "azlwListsCollections"

</lotusscript></code><code event='declarations'><lotusscript>
Const VIEWNAME = "lkp-LogsByLogTime"
Const SECONDS_IN_DAY = 86400 ' 60 seconds * 60 minutes * 24 hours
Const MAX_DOCS_TO_PURGE = |32767|
Const FORMAT_WHOLE_THOUSANDS = |###,###,###,##0|
Const LOG_EVERY_X_DOCS = 500

Const ERR_PARAMETER_BLANK = 1199
Const MSG_PARAMETER_BLANK = |A required parameter is blank or missing.  |

Const ITEMNAME_CONFIG_PURGEENABLED = ITEMNAME_ENHLOG_YN_PURGEENABLED
Const ITEMNAME_CONFIG_PURGEAGEDAYS = ITEMNAME_ENHLOG_PURGE_AGE
Const ITEMNAME_TIMESTAMP = |A$LOGTIME|
Const PURGE_TARGET_DESCRIPTION = |Enhanced Log| 
 
Dim deleted As Long
Dim purgeEnabled As Boolean

</lotusscript></code><code event='initialize'><lotusscript>
Sub Initialize()
	On Error Goto ErrorTrap

	Dim configdoc As NotesDocument 

	Dim unids As Variant 
	Dim universalID$
	
	Dim failureUNIDs As New StringSet() 
	Dim failures As Long
	
	
	Set configdoc = enhLogGetLogConfigDoc(False)
	If (configdoc Is Nothing) Then
		enhLogWarning ||, |Enhanced Log Configuration document not available.|
		Goto ExitPoint
	End If 
	
	If Not (configdoc.hasItem(ITEMNAME_CONFIG_PURGEENABLED) And configdoc.hasItem(ITEMNAME_CONFIG_PURGEAGEDAYS)) Then
		enhLogWarning ||, |Purge | &amp; PURGE_TARGET_DESCRIPTION &amp; | documents NOT configured.|
		Goto ExitPoint 
	End If
	
	If Not getPurgeUNIDs(configdoc).hasContent Then Goto ExitPoint 

	enhLogAction ||, |Purging | &amp; Format$(getPurgeUNIDs(configdoc).size, FORMAT_WHOLE_THOUSANDS) &amp; | documents.|
	
	unids = getPurgeUNIDs(configdoc).Values 	
	Forall element In unids
		universalID$ = Cstr(element) 
		If deleteDocByUNID(universalID$) Then
			deleted&amp; = deleted&amp; + 1
		Else
			failureUNIDs.add(universalID$)
		End If 
		
		If ((deleted&amp; Mod LOG_EVERY_X_DOCS) = 0) Then enhLogAction ||, |Purged | &amp; Format$(deleted&amp;, FORMAT_WHOLE_THOUSANDS) &amp; | documents.|
	End Forall 	
	
	
	failures&amp; = failureUNIDs.size 
	If (failures&amp; &gt; 0) Then
		enhLogExtendedContent ||, |Failed to delete | &amp; _ 
		Format$(failures&amp;, FORMAT_WHOLE_THOUSANDS) &amp; _ 
		| all target documents|, |Remaing UNIDs:|
		
		unids = failureUNIDs.Values 
		Forall element In unids
			enhLogExtendedContent ||, ||, Cstr(element)			
		End Forall 
	End If 
	
ExitPoint:
	Exit Sub
ErrorTrap:
	On Error Goto 0
	enhLogException ||, ||
	Resume ExitPoint
End Sub

</lotusscript></code><code event='terminate'><lotusscript>Sub Terminate()
	On Error Goto ErrorTrap
	
	If purgeEnabled Then enhLogMethodResult ||, |Purged | &amp; Format$(deleted&amp;, FORMAT_WHOLE_THOUSANDS)  &amp; | documents.|
	
ExitPoint:
	Exit Sub
ErrorTrap:
	On Error Goto 0
	enhLogException ||, ||
	Resume ExitPoint
End Sub

</lotusscript></code><code event='getPurgeUNIDs'><lotusscript>
Function getPurgeUNIDs(configdoc As NotesDocument) As StringSet
	If (configdoc Is Nothing) Then Error ERR_PARAMETER_BLANK, MSG_PARAMETER_BLANK &amp; |Config document is Nothing.  |
	On Error Goto ErrorTrap
	
	Static result As StringSet 

	Dim unprocessed As NotesDocumentCollection 
	Dim ndoc As NotesDocument 

	Dim ndtKey As New NotesDateTime(Today)
	Dim ndt As NotesDateTime
	
	Dim count&amp;
	Dim days%
	Dim purgeAge%

	
	If (result Is Nothing) Then  
		Set result = New StringSet()				
		
		purgeEnabled = (("1" = configdoc.getFirstItem(ITEMNAME_CONFIG_PURGEENABLED).Text) _ 
		Or ("Yes" = configdoc.getFirstItem(ITEMNAME_CONFIG_PURGEENABLED).Text) )
		purgeAge% = Abs(Cint(configdoc.getFirstItem(ITEMNAME_CONFIG_PURGEAGEDAYS).Text))

		If Not purgeEnabled Then Goto ExitPoint 
		
		enhLogAction ||, |Purging | &amp; PURGE_TARGET_DESCRIPTION &amp; | documents older than | &amp;  Format$(purgeAge%, FORMAT_WHOLE_THOUSANDS) &amp; | days.|
		
		Set unprocessed = getCurrentDb().UnprocessedDocuments 
		Set ndoc = unprocessed.getFirstDocument() 
		While Not (ndoc Is Nothing) 
			If (count&amp; + 1 &gt; MAX_DOCS_TO_PURGE) Then 
				enhLogWarning ||, |Maximum docs to purge exceeded.  | &amp; Chr(10) &amp; _ 
				|Purging | &amp; Format$(MAX_DOCS_TO_PURGE, FORMAT_WHOLE_THOUSANDS) &amp; | documents.|
				Goto ExitPoint
			End If 
			
			Set ndt = ndoc.getFirstItem(ITEMNAME_TIMESTAMP).DateTimeValue
			days% = Cint(Round((ndtKey.TimeDifferenceDouble(ndt) / SECONDS_IN_DAY), 0))
			If (days% &gt; purgeAge%) Then 
				result.add(ndoc.UniversalID)
				count&amp; = count&amp; + 1
			End If 				
			
			Set ndoc = unprocessed.getNextDocument(ndoc) 
		Wend

		enhLogMethodResult ||, |Loaded | &amp; Format$(result.size, FORMAT_WHOLE_THOUSANDS) &amp; | UNIDs for processing.|
	End If 
	
ExitPoint:
	Set getPurgeUNIDs = result
	Exit Function
ErrorTrap:
	On Error Goto 0
	enhLogException ||, ||
	Resume ExitPoint	
End Function 

</lotusscript></code><code event='deleteDocByUNID'><lotusscript>

Function deleteDocByUNID(unid$) As Boolean
	Dim extendedInfo As String
	Dim result As Boolean
	On Error Goto ErrorTrap
	
	Dim ndoc As NotesDocument
	
	extendedInfo$ = |UNID = "| &amp; unid$ &amp; |"|
	Set ndoc = getDocumentByUNID(unid$)
	If (ndoc Is Nothing) Then Goto ExitPoint 
	result = ndoc.Remove(True)
	
ExitPoint:
	deleteDocByUNID = result
	Exit Function
ErrorTrap:
	On Error Goto 0
	enhLogException ||, extendedInfo$
	result = False
	Resume ExitPoint	
End Function ' deleteDocByUNID</lotusscript></code>
<item name='$POID'><datetime>20101203T153715,32-05</datetime></item></agent>

